// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GraphCard change an active tab 1`] = `
<section
  class="card-container large"
>
  <div
    class="card"
  >
    <!---->
     
    <header
      class="card__header"
    >
      <div
        class="card__headertext"
      >
        <h2
          class="card__title"
        >
          Eierform
        </h2>
      </div>
       
      <nav
        class="card__nav"
      >
        <div
          class="tabs"
          role="tablist"
        >
          <div
            class="resize-observer"
            data-v-b329ee4c=""
            tabindex="-1"
          >
            <object
              aria-hidden="true"
              data="about:blank"
              tabindex="-1"
              type="text/html"
            />
          </div>
           
          <button
            aria-label="Andel"
            class="tabs__tab"
            id="tabButton-Eierform-0"
            role="tab"
          >
            Andel
          </button>
          <button
            aria-label="Matrise"
            class="tabs__tab active"
            id="tabButton-Eierform-1"
            role="tab"
          >
            Matrise
          </button>
          <button
            aria-label="Historisk"
            class="tabs__tab"
            id="tabButton-Eierform-2"
            role="tab"
          >
            Historisk
          </button>
           
          <!---->
        </div>
         
        <div
          class="card__toggle-menu"
        >
          <button
            aria-label="Graf"
            class="card__toggle-button card__toggle-button--active"
            title="Graf"
          >
            <!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
          </button>
           
          <button
            aria-label="Tabell"
            class="card__toggle-button"
            title="Tabell"
          >
            <!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
          </button>
           
          <button
            aria-label="Kart"
            class="card__toggle-button"
            title="Kart"
          >
            <!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
          </button>
        </div>
         
        <div
          class="context-menu"
        >
          <button
            aria-haspopup="true"
            aria-label="Åpne meny"
            class="context-menu__button"
            id="context-menu-button"
            title="Åpne meny"
          >
            <!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
             
            <span
              class="button-label"
            >
              Valg
            </span>
          </button>
           
          <!---->
        </div>
      </nav>
    </header>
     
    <div
      class="graph__shadow"
      role="tabpanel"
    >
      <div
        aria-hidden="true"
        class="graph__container"
      >
        <div
          class="spinner"
        >
          <!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
           
          <span
            class="spinner__text"
          >
            Henter data
          </span>
        </div>
         
        <!---->
         
        <svg
          aria-hidden="true"
          class="graph__svg loading"
        />
      </div>
       
      <div
        class="graph__tablecontainer visually-hidden"
      >
        <h3
          class="table-heading"
        />
         
        <table
          class=""
        >
          <thead />
           
          <tbody />
        </table>
         
        <!---->
      </div>
       
      <div
        class="resize-observer"
        data-v-b329ee4c=""
        tabindex="-1"
      >
        <object
          aria-hidden="true"
          data="about:blank"
          tabindex="-1"
          type="text/html"
        />
      </div>
       
      <!---->
    </div>
     
    <!---->
     
    <!---->
  </div>
</section>
`;

exports[`GraphCard renders correctly 1`] = `
<section
  class="card-container large"
>
  <div
    class="card"
  >
    <!---->
     
    <header
      class="card__header"
    >
      <div
        class="card__headertext"
      >
        <h2
          class="card__title"
        >
          Befolkningen etter alder
        </h2>
      </div>
       
      <nav
        class="card__nav"
      >
        <div
          class="tabs"
          role="tablist"
        >
          <div
            class="resize-observer"
            data-v-b329ee4c=""
            tabindex="-1"
          >
            <object
              aria-hidden="true"
              data="about:blank"
              tabindex="-1"
              type="text/html"
            />
          </div>
           
          <button
            aria-label="Antall"
            class="tabs__tab active"
            id="tabButton-Befolkningen etter alder-0"
            role="tab"
          >
            Antall
          </button>
          <button
            aria-label="Andel"
            class="tabs__tab"
            id="tabButton-Befolkningen etter alder-1"
            role="tab"
          >
            Andel
          </button>
           
          <!---->
        </div>
         
        <div
          class="card__toggle-menu"
        >
          <button
            aria-label="Graf"
            class="card__toggle-button card__toggle-button--active"
            title="Graf"
          >
            <!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
          </button>
           
          <button
            aria-label="Tabell"
            class="card__toggle-button"
            title="Tabell"
          >
            <!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
          </button>
           
          <!---->
        </div>
         
        <div
          class="context-menu"
        >
          <button
            aria-haspopup="true"
            aria-label="Åpne meny"
            class="context-menu__button"
            id="context-menu-button"
            title="Åpne meny"
          >
            <!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
             
            <span
              class="button-label"
            >
              Valg
            </span>
          </button>
           
          <!---->
        </div>
      </nav>
    </header>
     
    <div
      class="graph__shadow"
      role="tabpanel"
    >
      <div
        aria-hidden="true"
        class="graph__container"
      >
        <div
          class="spinner"
        >
          <!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
           
          <span
            class="spinner__text"
          >
            Henter data
          </span>
        </div>
         
        <!---->
         
        <svg
          aria-hidden="true"
          class="graph__svg loading"
        />
      </div>
       
      <div
        class="graph__tablecontainer visually-hidden"
      >
        <h3
          class="table-heading"
        />
         
        <table
          class=""
        >
          <thead />
           
          <tbody />
        </table>
         
        <!---->
      </div>
       
      <div
        class="resize-observer"
        data-v-b329ee4c=""
        tabindex="-1"
      >
        <object
          aria-hidden="true"
          data="about:blank"
          tabindex="-1"
          type="text/html"
        />
      </div>
       
      <div
        class="help"
      >
        <button
          aria-label="Vis hjelpetekst"
          class="help__button"
        >
          <!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
        </button>
         
        <!---->
      </div>
    </div>
     
    <!---->
     
    <!---->
  </div>
</section>
`;
